/* soapH.h
   Generated by gSOAP 2.8.15 from ChallengeService.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include <soap/soapStub.h>
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_serialize_LONG64(soap, data), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_serialize_time(soap, data), soap_begin_send(soap) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns1__action
#define SOAP_TYPE_ns1__action (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__action(struct soap*, enum ns1__action *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__action(struct soap*, const char*, int, const enum ns1__action *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__action2s(struct soap*, enum ns1__action);
SOAP_FMAC3 enum ns1__action * SOAP_FMAC4 soap_in_ns1__action(struct soap*, const char*, enum ns1__action *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__action(struct soap*, const char*, enum ns1__action *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__action(struct soap*, const enum ns1__action *, const char*, const char*);

#ifndef soap_write_ns1__action
#define soap_write_ns1__action(soap, data) ( soap_serialize_ns1__action(soap, data), soap_begin_send(soap) || soap_put_ns1__action(soap, data, "ns1:action", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns1__action * SOAP_FMAC4 soap_get_ns1__action(struct soap*, enum ns1__action *, const char*, const char*);

#ifndef soap_read_ns1__action
#define soap_read_ns1__action(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__action(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns1__direction
#define SOAP_TYPE_ns1__direction (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__direction(struct soap*, enum ns1__direction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__direction(struct soap*, const char*, int, const enum ns1__direction *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__direction2s(struct soap*, enum ns1__direction);
SOAP_FMAC3 enum ns1__direction * SOAP_FMAC4 soap_in_ns1__direction(struct soap*, const char*, enum ns1__direction *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__direction(struct soap*, const char*, enum ns1__direction *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__direction(struct soap*, const enum ns1__direction *, const char*, const char*);

#ifndef soap_write_ns1__direction
#define soap_write_ns1__direction(soap, data) ( soap_serialize_ns1__direction(soap, data), soap_begin_send(soap) || soap_put_ns1__direction(soap, data, "ns1:direction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns1__direction * SOAP_FMAC4 soap_get_ns1__direction(struct soap*, enum ns1__direction *, const char*, const char*);

#ifndef soap_read_ns1__direction
#define soap_read_ns1__direction(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__direction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns1__state
#define SOAP_TYPE_ns1__state (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__state(struct soap*, enum ns1__state *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__state(struct soap*, const char*, int, const enum ns1__state *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__state2s(struct soap*, enum ns1__state);
SOAP_FMAC3 enum ns1__state * SOAP_FMAC4 soap_in_ns1__state(struct soap*, const char*, enum ns1__state *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__state(struct soap*, const char*, enum ns1__state *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__state(struct soap*, const enum ns1__state *, const char*, const char*);

#ifndef soap_write_ns1__state
#define soap_write_ns1__state(soap, data) ( soap_serialize_ns1__state(soap, data), soap_begin_send(soap) || soap_put_ns1__state(soap, data, "ns1:state", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns1__state * SOAP_FMAC4 soap_get_ns1__state(struct soap*, enum ns1__state *, const char*, const char*);

#ifndef soap_read_ns1__state
#define soap_read_ns1__state(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__state(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__NoBlameException
#define SOAP_TYPE_ns1__NoBlameException (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NoBlameException(struct soap*, const char*, int, const ns1__NoBlameException *, const char*);
SOAP_FMAC3 ns1__NoBlameException * SOAP_FMAC4 soap_in_ns1__NoBlameException(struct soap*, const char*, ns1__NoBlameException *, const char*);

#ifndef soap_write_ns1__NoBlameException
#define soap_write_ns1__NoBlameException(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:NoBlameException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__NoBlameException * SOAP_FMAC4 soap_get_ns1__NoBlameException(struct soap*, ns1__NoBlameException *, const char*, const char*);

#ifndef soap_read_ns1__NoBlameException
#define soap_read_ns1__NoBlameException(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__NoBlameException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__NoBlameException * SOAP_FMAC2 soap_instantiate_ns1__NoBlameException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NoBlameException * soap_new_ns1__NoBlameException(struct soap *soap, int n = -1) { return soap_instantiate_ns1__NoBlameException(soap, n, NULL, NULL, NULL); }

inline ns1__NoBlameException * soap_new_req_ns1__NoBlameException(struct soap *soap) { ns1__NoBlameException *_p = soap_instantiate_ns1__NoBlameException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__NoBlameException * soap_new_set_ns1__NoBlameException(struct soap *soap) { ns1__NoBlameException *_p = soap_instantiate_ns1__NoBlameException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__NoBlameException(struct soap *soap, ns1__NoBlameException *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__NoBlameException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__EndOfGameException
#define SOAP_TYPE_ns1__EndOfGameException (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EndOfGameException(struct soap*, const char*, int, const ns1__EndOfGameException *, const char*);
SOAP_FMAC3 ns1__EndOfGameException * SOAP_FMAC4 soap_in_ns1__EndOfGameException(struct soap*, const char*, ns1__EndOfGameException *, const char*);

#ifndef soap_write_ns1__EndOfGameException
#define soap_write_ns1__EndOfGameException(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:EndOfGameException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__EndOfGameException * SOAP_FMAC4 soap_get_ns1__EndOfGameException(struct soap*, ns1__EndOfGameException *, const char*, const char*);

#ifndef soap_read_ns1__EndOfGameException
#define soap_read_ns1__EndOfGameException(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__EndOfGameException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__EndOfGameException * SOAP_FMAC2 soap_instantiate_ns1__EndOfGameException(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EndOfGameException * soap_new_ns1__EndOfGameException(struct soap *soap, int n = -1) { return soap_instantiate_ns1__EndOfGameException(soap, n, NULL, NULL, NULL); }

inline ns1__EndOfGameException * soap_new_req_ns1__EndOfGameException(struct soap *soap) { ns1__EndOfGameException *_p = soap_instantiate_ns1__EndOfGameException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__EndOfGameException * soap_new_set_ns1__EndOfGameException(struct soap *soap) { ns1__EndOfGameException *_p = soap_instantiate_ns1__EndOfGameException(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__EndOfGameException(struct soap *soap, ns1__EndOfGameException *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__EndOfGameException(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__stateArray
#define SOAP_TYPE_ns1__stateArray (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stateArray(struct soap*, const char*, int, const ns1__stateArray *, const char*);
SOAP_FMAC3 ns1__stateArray * SOAP_FMAC4 soap_in_ns1__stateArray(struct soap*, const char*, ns1__stateArray *, const char*);

#ifndef soap_write_ns1__stateArray
#define soap_write_ns1__stateArray(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:stateArray", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__stateArray * SOAP_FMAC4 soap_get_ns1__stateArray(struct soap*, ns1__stateArray *, const char*, const char*);

#ifndef soap_read_ns1__stateArray
#define soap_read_ns1__stateArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__stateArray(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__stateArray * SOAP_FMAC2 soap_instantiate_ns1__stateArray(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stateArray * soap_new_ns1__stateArray(struct soap *soap, int n = -1) { return soap_instantiate_ns1__stateArray(soap, n, NULL, NULL, NULL); }

inline ns1__stateArray * soap_new_req_ns1__stateArray(struct soap *soap) { ns1__stateArray *_p = soap_instantiate_ns1__stateArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__stateArray * soap_new_set_ns1__stateArray(struct soap *soap, std::vector<enum ns1__state >& item) { ns1__stateArray *_p = soap_instantiate_ns1__stateArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__stateArray::item = item; } return _p; }

inline void soap_delete_ns1__stateArray(struct soap *soap, ns1__stateArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__stateArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setActionsResponse
#define SOAP_TYPE_ns1__setActionsResponse (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setActionsResponse(struct soap*, const char*, int, const ns1__setActionsResponse *, const char*);
SOAP_FMAC3 ns1__setActionsResponse * SOAP_FMAC4 soap_in_ns1__setActionsResponse(struct soap*, const char*, ns1__setActionsResponse *, const char*);

#ifndef soap_write_ns1__setActionsResponse
#define soap_write_ns1__setActionsResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:setActionsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setActionsResponse * SOAP_FMAC4 soap_get_ns1__setActionsResponse(struct soap*, ns1__setActionsResponse *, const char*, const char*);

#ifndef soap_read_ns1__setActionsResponse
#define soap_read_ns1__setActionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setActionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__setActionsResponse * SOAP_FMAC2 soap_instantiate_ns1__setActionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__setActionsResponse * soap_new_ns1__setActionsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setActionsResponse(soap, n, NULL, NULL, NULL); }

inline ns1__setActionsResponse * soap_new_req_ns1__setActionsResponse(struct soap *soap) { ns1__setActionsResponse *_p = soap_instantiate_ns1__setActionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__setActionsResponse * soap_new_set_ns1__setActionsResponse(struct soap *soap, ns1__delta *return_) { ns1__setActionsResponse *_p = soap_instantiate_ns1__setActionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__setActionsResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__setActionsResponse(struct soap *soap, ns1__setActionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setActionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setActions
#define SOAP_TYPE_ns1__setActions (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setActions(struct soap*, const char*, int, const ns1__setActions *, const char*);
SOAP_FMAC3 ns1__setActions * SOAP_FMAC4 soap_in_ns1__setActions(struct soap*, const char*, ns1__setActions *, const char*);

#ifndef soap_write_ns1__setActions
#define soap_write_ns1__setActions(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:setActions", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setActions * SOAP_FMAC4 soap_get_ns1__setActions(struct soap*, ns1__setActions *, const char*, const char*);

#ifndef soap_read_ns1__setActions
#define soap_read_ns1__setActions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setActions(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__setActions * SOAP_FMAC2 soap_instantiate_ns1__setActions(struct soap*, int, const char*, const char*, size_t*);

inline ns1__setActions * soap_new_ns1__setActions(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setActions(soap, n, NULL, NULL, NULL); }

inline ns1__setActions * soap_new_req_ns1__setActions(struct soap *soap) { ns1__setActions *_p = soap_instantiate_ns1__setActions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__setActions * soap_new_set_ns1__setActions(struct soap *soap, enum ns1__action *arg0, enum ns1__action *arg1) { ns1__setActions *_p = soap_instantiate_ns1__setActions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__setActions::arg0 = arg0; _p->ns1__setActions::arg1 = arg1; } return _p; }

inline void soap_delete_ns1__setActions(struct soap *soap, ns1__setActions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setActions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__board
#define SOAP_TYPE_ns1__board (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__board(struct soap*, const char*, int, const ns1__board *, const char*);
SOAP_FMAC3 ns1__board * SOAP_FMAC4 soap_in_ns1__board(struct soap*, const char*, ns1__board *, const char*);

#ifndef soap_write_ns1__board
#define soap_write_ns1__board(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:board", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__board * SOAP_FMAC4 soap_get_ns1__board(struct soap*, ns1__board *, const char*, const char*);

#ifndef soap_read_ns1__board
#define soap_read_ns1__board(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__board(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__board * SOAP_FMAC2 soap_instantiate_ns1__board(struct soap*, int, const char*, const char*, size_t*);

inline ns1__board * soap_new_ns1__board(struct soap *soap, int n = -1) { return soap_instantiate_ns1__board(soap, n, NULL, NULL, NULL); }

inline ns1__board * soap_new_req_ns1__board(struct soap *soap, int endGamePoint) { ns1__board *_p = soap_instantiate_ns1__board(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__board::endGamePoint = endGamePoint; } return _p; }

inline ns1__board * soap_new_set_ns1__board(struct soap *soap, int endGamePoint, std::vector<ns1__stateArray * >& states) { ns1__board *_p = soap_instantiate_ns1__board(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__board::endGamePoint = endGamePoint; _p->ns1__board::states = states; } return _p; }

inline void soap_delete_ns1__board(struct soap *soap, ns1__board *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__board(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__loginResponse
#define SOAP_TYPE_ns1__loginResponse (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__loginResponse(struct soap*, const char*, int, const ns1__loginResponse *, const char*);
SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_in_ns1__loginResponse(struct soap*, const char*, ns1__loginResponse *, const char*);

#ifndef soap_write_ns1__loginResponse
#define soap_write_ns1__loginResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:loginResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__loginResponse * SOAP_FMAC4 soap_get_ns1__loginResponse(struct soap*, ns1__loginResponse *, const char*, const char*);

#ifndef soap_read_ns1__loginResponse
#define soap_read_ns1__loginResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__loginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__loginResponse * SOAP_FMAC2 soap_instantiate_ns1__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__loginResponse * soap_new_ns1__loginResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__loginResponse(soap, n, NULL, NULL, NULL); }

inline ns1__loginResponse * soap_new_req_ns1__loginResponse(struct soap *soap) { ns1__loginResponse *_p = soap_instantiate_ns1__loginResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__loginResponse * soap_new_set_ns1__loginResponse(struct soap *soap, ns1__board *return_) { ns1__loginResponse *_p = soap_instantiate_ns1__loginResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__loginResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__loginResponse(struct soap *soap, ns1__loginResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__loginResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__login
#define SOAP_TYPE_ns1__login (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__login(struct soap*, const char*, int, const ns1__login *, const char*);
SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_in_ns1__login(struct soap*, const char*, ns1__login *, const char*);

#ifndef soap_write_ns1__login
#define soap_write_ns1__login(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__login * SOAP_FMAC4 soap_get_ns1__login(struct soap*, ns1__login *, const char*, const char*);

#ifndef soap_read_ns1__login
#define soap_read_ns1__login(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__login * SOAP_FMAC2 soap_instantiate_ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline ns1__login * soap_new_ns1__login(struct soap *soap, int n = -1) { return soap_instantiate_ns1__login(soap, n, NULL, NULL, NULL); }

inline ns1__login * soap_new_req_ns1__login(struct soap *soap) { ns1__login *_p = soap_instantiate_ns1__login(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__login * soap_new_set_ns1__login(struct soap *soap) { ns1__login *_p = soap_instantiate_ns1__login(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__login(struct soap *soap, ns1__login *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__login(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__delta
#define SOAP_TYPE_ns1__delta (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__delta(struct soap*, const char*, int, const ns1__delta *, const char*);
SOAP_FMAC3 ns1__delta * SOAP_FMAC4 soap_in_ns1__delta(struct soap*, const char*, ns1__delta *, const char*);

#ifndef soap_write_ns1__delta
#define soap_write_ns1__delta(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:delta", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__delta * SOAP_FMAC4 soap_get_ns1__delta(struct soap*, ns1__delta *, const char*, const char*);

#ifndef soap_read_ns1__delta
#define soap_read_ns1__delta(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__delta(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__delta * SOAP_FMAC2 soap_instantiate_ns1__delta(struct soap*, int, const char*, const char*, size_t*);

inline ns1__delta * soap_new_ns1__delta(struct soap *soap, int n = -1) { return soap_instantiate_ns1__delta(soap, n, NULL, NULL, NULL); }

inline ns1__delta * soap_new_req_ns1__delta(struct soap *soap, LONG64 millisecondsToNextTick) { ns1__delta *_p = soap_instantiate_ns1__delta(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__delta::millisecondsToNextTick = millisecondsToNextTick; } return _p; }

inline ns1__delta * soap_new_set_ns1__delta(struct soap *soap, LONG64 millisecondsToNextTick) { ns1__delta *_p = soap_instantiate_ns1__delta(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__delta::millisecondsToNextTick = millisecondsToNextTick; } return _p; }

inline void soap_delete_ns1__delta(struct soap *soap, ns1__delta *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__delta(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setActionResponse
#define SOAP_TYPE_ns1__setActionResponse (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setActionResponse(struct soap*, const char*, int, const ns1__setActionResponse *, const char*);
SOAP_FMAC3 ns1__setActionResponse * SOAP_FMAC4 soap_in_ns1__setActionResponse(struct soap*, const char*, ns1__setActionResponse *, const char*);

#ifndef soap_write_ns1__setActionResponse
#define soap_write_ns1__setActionResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:setActionResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setActionResponse * SOAP_FMAC4 soap_get_ns1__setActionResponse(struct soap*, ns1__setActionResponse *, const char*, const char*);

#ifndef soap_read_ns1__setActionResponse
#define soap_read_ns1__setActionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setActionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__setActionResponse * SOAP_FMAC2 soap_instantiate_ns1__setActionResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__setActionResponse * soap_new_ns1__setActionResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setActionResponse(soap, n, NULL, NULL, NULL); }

inline ns1__setActionResponse * soap_new_req_ns1__setActionResponse(struct soap *soap) { ns1__setActionResponse *_p = soap_instantiate_ns1__setActionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__setActionResponse * soap_new_set_ns1__setActionResponse(struct soap *soap, ns1__delta *return_) { ns1__setActionResponse *_p = soap_instantiate_ns1__setActionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__setActionResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__setActionResponse(struct soap *soap, ns1__setActionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setActionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setAction
#define SOAP_TYPE_ns1__setAction (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setAction(struct soap*, const char*, int, const ns1__setAction *, const char*);
SOAP_FMAC3 ns1__setAction * SOAP_FMAC4 soap_in_ns1__setAction(struct soap*, const char*, ns1__setAction *, const char*);

#ifndef soap_write_ns1__setAction
#define soap_write_ns1__setAction(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:setAction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setAction * SOAP_FMAC4 soap_get_ns1__setAction(struct soap*, ns1__setAction *, const char*, const char*);

#ifndef soap_read_ns1__setAction
#define soap_read_ns1__setAction(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setAction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__setAction * SOAP_FMAC2 soap_instantiate_ns1__setAction(struct soap*, int, const char*, const char*, size_t*);

inline ns1__setAction * soap_new_ns1__setAction(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setAction(soap, n, NULL, NULL, NULL); }

inline ns1__setAction * soap_new_req_ns1__setAction(struct soap *soap, int arg0) { ns1__setAction *_p = soap_instantiate_ns1__setAction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__setAction::arg0 = arg0; } return _p; }

inline ns1__setAction * soap_new_set_ns1__setAction(struct soap *soap, int arg0, enum ns1__action *arg1) { ns1__setAction *_p = soap_instantiate_ns1__setAction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__setAction::arg0 = arg0; _p->ns1__setAction::arg1 = arg1; } return _p; }

inline void soap_delete_ns1__setAction(struct soap *soap, ns1__setAction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setAction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__arrayList
#define SOAP_TYPE_ns1__arrayList (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__arrayList(struct soap*, const char*, int, const ns1__arrayList *, const char*);
SOAP_FMAC3 ns1__arrayList * SOAP_FMAC4 soap_in_ns1__arrayList(struct soap*, const char*, ns1__arrayList *, const char*);

#ifndef soap_write_ns1__arrayList
#define soap_write_ns1__arrayList(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:arrayList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__arrayList * SOAP_FMAC4 soap_get_ns1__arrayList(struct soap*, ns1__arrayList *, const char*, const char*);

#ifndef soap_read_ns1__arrayList
#define soap_read_ns1__arrayList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__arrayList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__arrayList * SOAP_FMAC2 soap_instantiate_ns1__arrayList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__arrayList * soap_new_ns1__arrayList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__arrayList(soap, n, NULL, NULL, NULL); }

inline ns1__arrayList * soap_new_req_ns1__arrayList(struct soap *soap) { ns1__arrayList *_p = soap_instantiate_ns1__arrayList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__arrayList * soap_new_set_ns1__arrayList(struct soap *soap) { ns1__arrayList *_p = soap_instantiate_ns1__arrayList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__arrayList(struct soap *soap, ns1__arrayList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__arrayList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__abstractList
#define SOAP_TYPE_ns1__abstractList (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__abstractList(struct soap*, const char*, int, const ns1__abstractList *, const char*);
SOAP_FMAC3 ns1__abstractList * SOAP_FMAC4 soap_in_ns1__abstractList(struct soap*, const char*, ns1__abstractList *, const char*);

#ifndef soap_write_ns1__abstractList
#define soap_write_ns1__abstractList(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:abstractList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__abstractList * SOAP_FMAC4 soap_get_ns1__abstractList(struct soap*, ns1__abstractList *, const char*, const char*);

#ifndef soap_read_ns1__abstractList
#define soap_read_ns1__abstractList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__abstractList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__abstractList * SOAP_FMAC2 soap_instantiate_ns1__abstractList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__abstractList * soap_new_ns1__abstractList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__abstractList(soap, n, NULL, NULL, NULL); }

inline ns1__abstractList * soap_new_req_ns1__abstractList(struct soap *soap) { ns1__abstractList *_p = soap_instantiate_ns1__abstractList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__abstractList * soap_new_set_ns1__abstractList(struct soap *soap) { ns1__abstractList *_p = soap_instantiate_ns1__abstractList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__abstractList(struct soap *soap, ns1__abstractList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__abstractList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__abstractCollection
#define SOAP_TYPE_ns1__abstractCollection (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__abstractCollection(struct soap*, const char*, int, const ns1__abstractCollection *, const char*);
SOAP_FMAC3 ns1__abstractCollection * SOAP_FMAC4 soap_in_ns1__abstractCollection(struct soap*, const char*, ns1__abstractCollection *, const char*);

#ifndef soap_write_ns1__abstractCollection
#define soap_write_ns1__abstractCollection(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:abstractCollection", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__abstractCollection * SOAP_FMAC4 soap_get_ns1__abstractCollection(struct soap*, ns1__abstractCollection *, const char*, const char*);

#ifndef soap_read_ns1__abstractCollection
#define soap_read_ns1__abstractCollection(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__abstractCollection(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__abstractCollection * SOAP_FMAC2 soap_instantiate_ns1__abstractCollection(struct soap*, int, const char*, const char*, size_t*);

inline ns1__abstractCollection * soap_new_ns1__abstractCollection(struct soap *soap, int n = -1) { return soap_instantiate_ns1__abstractCollection(soap, n, NULL, NULL, NULL); }

inline ns1__abstractCollection * soap_new_req_ns1__abstractCollection(struct soap *soap) { ns1__abstractCollection *_p = soap_instantiate_ns1__abstractCollection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__abstractCollection * soap_new_set_ns1__abstractCollection(struct soap *soap) { ns1__abstractCollection *_p = soap_instantiate_ns1__abstractCollection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__abstractCollection(struct soap *soap, ns1__abstractCollection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__abstractCollection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__base
#define SOAP_TYPE_ns1__base (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__base(struct soap*, const char*, int, const ns1__base *, const char*);
SOAP_FMAC3 ns1__base * SOAP_FMAC4 soap_in_ns1__base(struct soap*, const char*, ns1__base *, const char*);

#ifndef soap_write_ns1__base
#define soap_write_ns1__base(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:base", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__base * SOAP_FMAC4 soap_get_ns1__base(struct soap*, ns1__base *, const char*, const char*);

#ifndef soap_read_ns1__base
#define soap_read_ns1__base(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__base(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__base * SOAP_FMAC2 soap_instantiate_ns1__base(struct soap*, int, const char*, const char*, size_t*);

inline ns1__base * soap_new_ns1__base(struct soap *soap, int n = -1) { return soap_instantiate_ns1__base(soap, n, NULL, NULL, NULL); }

inline ns1__base * soap_new_req_ns1__base(struct soap *soap, int x, int y) { ns1__base *_p = soap_instantiate_ns1__base(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__base::x = x; _p->ns1__base::y = y; } return _p; }

inline ns1__base * soap_new_set_ns1__base(struct soap *soap, int x, int y) { ns1__base *_p = soap_instantiate_ns1__base(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__base::x = x; _p->ns1__base::y = y; } return _p; }

inline void soap_delete_ns1__base(struct soap *soap, ns1__base *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__base(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__player
#define SOAP_TYPE_ns1__player (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__player(struct soap*, const char*, int, const ns1__player *, const char*);
SOAP_FMAC3 ns1__player * SOAP_FMAC4 soap_in_ns1__player(struct soap*, const char*, ns1__player *, const char*);

#ifndef soap_write_ns1__player
#define soap_write_ns1__player(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:player", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__player * SOAP_FMAC4 soap_get_ns1__player(struct soap*, ns1__player *, const char*, const char*);

#ifndef soap_read_ns1__player
#define soap_read_ns1__player(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__player(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__player * SOAP_FMAC2 soap_instantiate_ns1__player(struct soap*, int, const char*, const char*, size_t*);

inline ns1__player * soap_new_ns1__player(struct soap *soap, int n = -1) { return soap_instantiate_ns1__player(soap, n, NULL, NULL, NULL); }

inline ns1__player * soap_new_req_ns1__player(struct soap *soap) { ns1__player *_p = soap_instantiate_ns1__player(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__player * soap_new_set_ns1__player(struct soap *soap, ns1__base *base, std::vector<ns1__bullet * >& bullets, std::string *name, std::vector<ns1__unit * >& units) { ns1__player *_p = soap_instantiate_ns1__player(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__player::base = base; _p->ns1__player::bullets = bullets; _p->ns1__player::name = name; _p->ns1__player::units = units; } return _p; }

inline void soap_delete_ns1__player(struct soap *soap, ns1__player *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__player(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__unit
#define SOAP_TYPE_ns1__unit (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unit(struct soap*, const char*, int, const ns1__unit *, const char*);
SOAP_FMAC3 ns1__unit * SOAP_FMAC4 soap_in_ns1__unit(struct soap*, const char*, ns1__unit *, const char*);

#ifndef soap_write_ns1__unit
#define soap_write_ns1__unit(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:unit", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__unit * SOAP_FMAC4 soap_get_ns1__unit(struct soap*, ns1__unit *, const char*, const char*);

#ifndef soap_read_ns1__unit
#define soap_read_ns1__unit(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__unit(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__unit * SOAP_FMAC2 soap_instantiate_ns1__unit(struct soap*, int, const char*, const char*, size_t*);

inline ns1__unit * soap_new_ns1__unit(struct soap *soap, int n = -1) { return soap_instantiate_ns1__unit(soap, n, NULL, NULL, NULL); }

inline ns1__unit * soap_new_req_ns1__unit(struct soap *soap, int id, int x, int y) { ns1__unit *_p = soap_instantiate_ns1__unit(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__unit::id = id; _p->ns1__unit::x = x; _p->ns1__unit::y = y; } return _p; }

inline ns1__unit * soap_new_set_ns1__unit(struct soap *soap, enum ns1__action *action, enum ns1__direction *direction, int id, int x, int y) { ns1__unit *_p = soap_instantiate_ns1__unit(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__unit::action = action; _p->ns1__unit::direction = direction; _p->ns1__unit::id = id; _p->ns1__unit::x = x; _p->ns1__unit::y = y; } return _p; }

inline void soap_delete_ns1__unit(struct soap *soap, ns1__unit *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__unit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__bullet
#define SOAP_TYPE_ns1__bullet (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__bullet(struct soap*, const char*, int, const ns1__bullet *, const char*);
SOAP_FMAC3 ns1__bullet * SOAP_FMAC4 soap_in_ns1__bullet(struct soap*, const char*, ns1__bullet *, const char*);

#ifndef soap_write_ns1__bullet
#define soap_write_ns1__bullet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:bullet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__bullet * SOAP_FMAC4 soap_get_ns1__bullet(struct soap*, ns1__bullet *, const char*, const char*);

#ifndef soap_read_ns1__bullet
#define soap_read_ns1__bullet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__bullet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__bullet * SOAP_FMAC2 soap_instantiate_ns1__bullet(struct soap*, int, const char*, const char*, size_t*);

inline ns1__bullet * soap_new_ns1__bullet(struct soap *soap, int n = -1) { return soap_instantiate_ns1__bullet(soap, n, NULL, NULL, NULL); }

inline ns1__bullet * soap_new_req_ns1__bullet(struct soap *soap, int id, int x, int y) { ns1__bullet *_p = soap_instantiate_ns1__bullet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__bullet::id = id; _p->ns1__bullet::x = x; _p->ns1__bullet::y = y; } return _p; }

inline ns1__bullet * soap_new_set_ns1__bullet(struct soap *soap, enum ns1__direction *direction, int id, int x, int y) { ns1__bullet *_p = soap_instantiate_ns1__bullet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__bullet::direction = direction; _p->ns1__bullet::id = id; _p->ns1__bullet::x = x; _p->ns1__bullet::y = y; } return _p; }

inline void soap_delete_ns1__bullet(struct soap *soap, ns1__bullet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__bullet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__unitEvent
#define SOAP_TYPE_ns1__unitEvent (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unitEvent(struct soap*, const char*, int, const ns1__unitEvent *, const char*);
SOAP_FMAC3 ns1__unitEvent * SOAP_FMAC4 soap_in_ns1__unitEvent(struct soap*, const char*, ns1__unitEvent *, const char*);

#ifndef soap_write_ns1__unitEvent
#define soap_write_ns1__unitEvent(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:unitEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__unitEvent * SOAP_FMAC4 soap_get_ns1__unitEvent(struct soap*, ns1__unitEvent *, const char*, const char*);

#ifndef soap_read_ns1__unitEvent
#define soap_read_ns1__unitEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__unitEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__unitEvent * SOAP_FMAC2 soap_instantiate_ns1__unitEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns1__unitEvent * soap_new_ns1__unitEvent(struct soap *soap, int n = -1) { return soap_instantiate_ns1__unitEvent(soap, n, NULL, NULL, NULL); }

inline ns1__unitEvent * soap_new_req_ns1__unitEvent(struct soap *soap, int tickTime) { ns1__unitEvent *_p = soap_instantiate_ns1__unitEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__unitEvent::tickTime = tickTime; } return _p; }

inline ns1__unitEvent * soap_new_set_ns1__unitEvent(struct soap *soap, ns1__bullet *bullet, int tickTime, ns1__unit *unit) { ns1__unitEvent *_p = soap_instantiate_ns1__unitEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__unitEvent::bullet = bullet; _p->ns1__unitEvent::tickTime = tickTime; _p->ns1__unitEvent::unit = unit; } return _p; }

inline void soap_delete_ns1__unitEvent(struct soap *soap, ns1__unitEvent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__unitEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__point
#define SOAP_TYPE_ns1__point (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__point(struct soap*, const char*, int, const ns1__point *, const char*);
SOAP_FMAC3 ns1__point * SOAP_FMAC4 soap_in_ns1__point(struct soap*, const char*, ns1__point *, const char*);

#ifndef soap_write_ns1__point
#define soap_write_ns1__point(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:point", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__point * SOAP_FMAC4 soap_get_ns1__point(struct soap*, ns1__point *, const char*, const char*);

#ifndef soap_read_ns1__point
#define soap_read_ns1__point(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__point(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__point * SOAP_FMAC2 soap_instantiate_ns1__point(struct soap*, int, const char*, const char*, size_t*);

inline ns1__point * soap_new_ns1__point(struct soap *soap, int n = -1) { return soap_instantiate_ns1__point(soap, n, NULL, NULL, NULL); }

inline ns1__point * soap_new_req_ns1__point(struct soap *soap, int x, int y) { ns1__point *_p = soap_instantiate_ns1__point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__point::x = x; _p->ns1__point::y = y; } return _p; }

inline ns1__point * soap_new_set_ns1__point(struct soap *soap, int x, int y) { ns1__point *_p = soap_instantiate_ns1__point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__point::x = x; _p->ns1__point::y = y; } return _p; }

inline void soap_delete_ns1__point(struct soap *soap, ns1__point *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__point(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__blockEvent
#define SOAP_TYPE_ns1__blockEvent (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__blockEvent(struct soap*, const char*, int, const ns1__blockEvent *, const char*);
SOAP_FMAC3 ns1__blockEvent * SOAP_FMAC4 soap_in_ns1__blockEvent(struct soap*, const char*, ns1__blockEvent *, const char*);

#ifndef soap_write_ns1__blockEvent
#define soap_write_ns1__blockEvent(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:blockEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__blockEvent * SOAP_FMAC4 soap_get_ns1__blockEvent(struct soap*, ns1__blockEvent *, const char*, const char*);

#ifndef soap_read_ns1__blockEvent
#define soap_read_ns1__blockEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__blockEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__blockEvent * SOAP_FMAC2 soap_instantiate_ns1__blockEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns1__blockEvent * soap_new_ns1__blockEvent(struct soap *soap, int n = -1) { return soap_instantiate_ns1__blockEvent(soap, n, NULL, NULL, NULL); }

inline ns1__blockEvent * soap_new_req_ns1__blockEvent(struct soap *soap) { ns1__blockEvent *_p = soap_instantiate_ns1__blockEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__blockEvent * soap_new_set_ns1__blockEvent(struct soap *soap, enum ns1__state *newState, ns1__point *point) { ns1__blockEvent *_p = soap_instantiate_ns1__blockEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__blockEvent::newState = newState; _p->ns1__blockEvent::point = point; } return _p; }

inline void soap_delete_ns1__blockEvent(struct soap *soap, ns1__blockEvent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__blockEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__events
#define SOAP_TYPE_ns1__events (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__events(struct soap*, const char*, int, const ns1__events *, const char*);
SOAP_FMAC3 ns1__events * SOAP_FMAC4 soap_in_ns1__events(struct soap*, const char*, ns1__events *, const char*);

#ifndef soap_write_ns1__events
#define soap_write_ns1__events(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:events", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__events * SOAP_FMAC4 soap_get_ns1__events(struct soap*, ns1__events *, const char*, const char*);

#ifndef soap_read_ns1__events
#define soap_read_ns1__events(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__events(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__events * SOAP_FMAC2 soap_instantiate_ns1__events(struct soap*, int, const char*, const char*, size_t*);

inline ns1__events * soap_new_ns1__events(struct soap *soap, int n = -1) { return soap_instantiate_ns1__events(soap, n, NULL, NULL, NULL); }

inline ns1__events * soap_new_req_ns1__events(struct soap *soap) { ns1__events *_p = soap_instantiate_ns1__events(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__events * soap_new_set_ns1__events(struct soap *soap, std::vector<ns1__blockEvent * >& blockEvents, std::vector<ns1__unitEvent * >& unitEvents) { ns1__events *_p = soap_instantiate_ns1__events(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__events::blockEvents = blockEvents; _p->ns1__events::unitEvents = unitEvents; } return _p; }

inline void soap_delete_ns1__events(struct soap *soap, ns1__events *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__events(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__game
#define SOAP_TYPE_ns1__game (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__game(struct soap*, const char*, int, const ns1__game *, const char*);
SOAP_FMAC3 ns1__game * SOAP_FMAC4 soap_in_ns1__game(struct soap*, const char*, ns1__game *, const char*);

#ifndef soap_write_ns1__game
#define soap_write_ns1__game(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:game", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__game * SOAP_FMAC4 soap_get_ns1__game(struct soap*, ns1__game *, const char*, const char*);

#ifndef soap_read_ns1__game
#define soap_read_ns1__game(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__game(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__game * SOAP_FMAC2 soap_instantiate_ns1__game(struct soap*, int, const char*, const char*, size_t*);

inline ns1__game * soap_new_ns1__game(struct soap *soap, int n = -1) { return soap_instantiate_ns1__game(soap, n, NULL, NULL, NULL); }

inline ns1__game * soap_new_req_ns1__game(struct soap *soap, int currentTick, LONG64 millisecondsToNextTick) { ns1__game *_p = soap_instantiate_ns1__game(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__game::currentTick = currentTick; _p->ns1__game::millisecondsToNextTick = millisecondsToNextTick; } return _p; }

inline ns1__game * soap_new_set_ns1__game(struct soap *soap, int currentTick, ns1__events *events, LONG64 millisecondsToNextTick, time_t *nextTickTime, std::string *playerName, std::vector<ns1__player * >& players) { ns1__game *_p = soap_instantiate_ns1__game(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__game::currentTick = currentTick; _p->ns1__game::events = events; _p->ns1__game::millisecondsToNextTick = millisecondsToNextTick; _p->ns1__game::nextTickTime = nextTickTime; _p->ns1__game::playerName = playerName; _p->ns1__game::players = players; } return _p; }

inline void soap_delete_ns1__game(struct soap *soap, ns1__game *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__game(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getStatusResponse
#define SOAP_TYPE_ns1__getStatusResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStatusResponse(struct soap*, const char*, int, const ns1__getStatusResponse *, const char*);
SOAP_FMAC3 ns1__getStatusResponse * SOAP_FMAC4 soap_in_ns1__getStatusResponse(struct soap*, const char*, ns1__getStatusResponse *, const char*);

#ifndef soap_write_ns1__getStatusResponse
#define soap_write_ns1__getStatusResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getStatusResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getStatusResponse * SOAP_FMAC4 soap_get_ns1__getStatusResponse(struct soap*, ns1__getStatusResponse *, const char*, const char*);

#ifndef soap_read_ns1__getStatusResponse
#define soap_read_ns1__getStatusResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getStatusResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__getStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getStatusResponse * soap_new_ns1__getStatusResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getStatusResponse(soap, n, NULL, NULL, NULL); }

inline ns1__getStatusResponse * soap_new_req_ns1__getStatusResponse(struct soap *soap) { ns1__getStatusResponse *_p = soap_instantiate_ns1__getStatusResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getStatusResponse * soap_new_set_ns1__getStatusResponse(struct soap *soap, ns1__game *return_) { ns1__getStatusResponse *_p = soap_instantiate_ns1__getStatusResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__getStatusResponse::return_ = return_; } return _p; }

inline void soap_delete_ns1__getStatusResponse(struct soap *soap, ns1__getStatusResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getStatusResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getStatus
#define SOAP_TYPE_ns1__getStatus (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStatus(struct soap*, const char*, int, const ns1__getStatus *, const char*);
SOAP_FMAC3 ns1__getStatus * SOAP_FMAC4 soap_in_ns1__getStatus(struct soap*, const char*, ns1__getStatus *, const char*);

#ifndef soap_write_ns1__getStatus
#define soap_write_ns1__getStatus(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:getStatus", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getStatus * SOAP_FMAC4 soap_get_ns1__getStatus(struct soap*, ns1__getStatus *, const char*, const char*);

#ifndef soap_read_ns1__getStatus
#define soap_read_ns1__getStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getStatus(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__getStatus * SOAP_FMAC2 soap_instantiate_ns1__getStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getStatus * soap_new_ns1__getStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getStatus(soap, n, NULL, NULL, NULL); }

inline ns1__getStatus * soap_new_req_ns1__getStatus(struct soap *soap) { ns1__getStatus *_p = soap_instantiate_ns1__getStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__getStatus * soap_new_set_ns1__getStatus(struct soap *soap) { ns1__getStatus *_p = soap_instantiate_ns1__getStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns1__getStatus(struct soap *soap, ns1__getStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__setActions
#define SOAP_TYPE___ns1__setActions (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setActions(struct soap*, struct __ns1__setActions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setActions(struct soap*, const struct __ns1__setActions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setActions(struct soap*, const char*, int, const struct __ns1__setActions *, const char*);
SOAP_FMAC3 struct __ns1__setActions * SOAP_FMAC4 soap_in___ns1__setActions(struct soap*, const char*, struct __ns1__setActions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setActions(struct soap*, const struct __ns1__setActions *, const char*, const char*);

#ifndef soap_write___ns1__setActions
#define soap_write___ns1__setActions(soap, data) ( soap_serialize___ns1__setActions(soap, data), soap_begin_send(soap) || soap_put___ns1__setActions(soap, data, "-ns1:setActions", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__setActions * SOAP_FMAC4 soap_get___ns1__setActions(struct soap*, struct __ns1__setActions *, const char*, const char*);

#ifndef soap_read___ns1__setActions
#define soap_read___ns1__setActions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setActions(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__setActions * SOAP_FMAC2 soap_instantiate___ns1__setActions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setActions * soap_new___ns1__setActions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setActions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setActions * soap_new_req___ns1__setActions(struct soap *soap) { struct __ns1__setActions *_p = soap_instantiate___ns1__setActions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setActions(soap, _p); } return _p; }

inline struct __ns1__setActions * soap_new_set___ns1__setActions(struct soap *soap, ns1__setActions *ns1__setActions_) { struct __ns1__setActions *_p = soap_instantiate___ns1__setActions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setActions(soap, _p); _p->ns1__setActions_ = ns1__setActions_; } return _p; }

inline void soap_delete___ns1__setActions(struct soap *soap, struct __ns1__setActions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setActions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__login
#define SOAP_TYPE___ns1__login (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__login(struct soap*, struct __ns1__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__login(struct soap*, const struct __ns1__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__login(struct soap*, const char*, int, const struct __ns1__login *, const char*);
SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_in___ns1__login(struct soap*, const char*, struct __ns1__login *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__login(struct soap*, const struct __ns1__login *, const char*, const char*);

#ifndef soap_write___ns1__login
#define soap_write___ns1__login(soap, data) ( soap_serialize___ns1__login(soap, data), soap_begin_send(soap) || soap_put___ns1__login(soap, data, "-ns1:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__login * SOAP_FMAC4 soap_get___ns1__login(struct soap*, struct __ns1__login *, const char*, const char*);

#ifndef soap_read___ns1__login
#define soap_read___ns1__login(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__login * SOAP_FMAC2 soap_instantiate___ns1__login(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__login * soap_new___ns1__login(struct soap *soap, int n = -1) { return soap_instantiate___ns1__login(soap, n, NULL, NULL, NULL); }

inline struct __ns1__login * soap_new_req___ns1__login(struct soap *soap) { struct __ns1__login *_p = soap_instantiate___ns1__login(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__login(soap, _p); } return _p; }

inline struct __ns1__login * soap_new_set___ns1__login(struct soap *soap, ns1__login *ns1__login_) { struct __ns1__login *_p = soap_instantiate___ns1__login(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__login(soap, _p); _p->ns1__login_ = ns1__login_; } return _p; }

inline void soap_delete___ns1__login(struct soap *soap, struct __ns1__login *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__login(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setAction
#define SOAP_TYPE___ns1__setAction (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setAction(struct soap*, struct __ns1__setAction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setAction(struct soap*, const struct __ns1__setAction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setAction(struct soap*, const char*, int, const struct __ns1__setAction *, const char*);
SOAP_FMAC3 struct __ns1__setAction * SOAP_FMAC4 soap_in___ns1__setAction(struct soap*, const char*, struct __ns1__setAction *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setAction(struct soap*, const struct __ns1__setAction *, const char*, const char*);

#ifndef soap_write___ns1__setAction
#define soap_write___ns1__setAction(soap, data) ( soap_serialize___ns1__setAction(soap, data), soap_begin_send(soap) || soap_put___ns1__setAction(soap, data, "-ns1:setAction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__setAction * SOAP_FMAC4 soap_get___ns1__setAction(struct soap*, struct __ns1__setAction *, const char*, const char*);

#ifndef soap_read___ns1__setAction
#define soap_read___ns1__setAction(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setAction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__setAction * SOAP_FMAC2 soap_instantiate___ns1__setAction(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setAction * soap_new___ns1__setAction(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setAction(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setAction * soap_new_req___ns1__setAction(struct soap *soap) { struct __ns1__setAction *_p = soap_instantiate___ns1__setAction(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setAction(soap, _p); } return _p; }

inline struct __ns1__setAction * soap_new_set___ns1__setAction(struct soap *soap, ns1__setAction *ns1__setAction_) { struct __ns1__setAction *_p = soap_instantiate___ns1__setAction(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setAction(soap, _p); _p->ns1__setAction_ = ns1__setAction_; } return _p; }

inline void soap_delete___ns1__setAction(struct soap *soap, struct __ns1__setAction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setAction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getStatus
#define SOAP_TYPE___ns1__getStatus (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getStatus(struct soap*, struct __ns1__getStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getStatus(struct soap*, const struct __ns1__getStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getStatus(struct soap*, const char*, int, const struct __ns1__getStatus *, const char*);
SOAP_FMAC3 struct __ns1__getStatus * SOAP_FMAC4 soap_in___ns1__getStatus(struct soap*, const char*, struct __ns1__getStatus *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getStatus(struct soap*, const struct __ns1__getStatus *, const char*, const char*);

#ifndef soap_write___ns1__getStatus
#define soap_write___ns1__getStatus(soap, data) ( soap_serialize___ns1__getStatus(soap, data), soap_begin_send(soap) || soap_put___ns1__getStatus(soap, data, "-ns1:getStatus", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__getStatus * SOAP_FMAC4 soap_get___ns1__getStatus(struct soap*, struct __ns1__getStatus *, const char*, const char*);

#ifndef soap_read___ns1__getStatus
#define soap_read___ns1__getStatus(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getStatus(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__getStatus * SOAP_FMAC2 soap_instantiate___ns1__getStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getStatus * soap_new___ns1__getStatus(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getStatus(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getStatus * soap_new_req___ns1__getStatus(struct soap *soap) { struct __ns1__getStatus *_p = soap_instantiate___ns1__getStatus(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getStatus(soap, _p); } return _p; }

inline struct __ns1__getStatus * soap_new_set___ns1__getStatus(struct soap *soap, ns1__getStatus *ns1__getStatus_) { struct __ns1__getStatus *_p = soap_instantiate___ns1__getStatus(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getStatus(soap, _p); _p->ns1__getStatus_ = ns1__getStatus_; } return _p; }

inline void soap_delete___ns1__getStatus(struct soap *soap, struct __ns1__getStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, ns1__EndOfGameException *ns1__EndOfGameException_, ns1__NoBlameException *ns1__NoBlameException_, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->ns1__EndOfGameException_ = ns1__EndOfGameException_; _p->ns1__NoBlameException_ = ns1__NoBlameException_; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons1__setActionsResponse
#define SOAP_TYPE_PointerTons1__setActionsResponse (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__setActionsResponse(struct soap*, ns1__setActionsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__setActionsResponse(struct soap*, const char *, int, ns1__setActionsResponse *const*, const char *);
SOAP_FMAC3 ns1__setActionsResponse ** SOAP_FMAC4 soap_in_PointerTons1__setActionsResponse(struct soap*, const char*, ns1__setActionsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__setActionsResponse(struct soap*, ns1__setActionsResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__setActionsResponse
#define soap_write_PointerTons1__setActionsResponse(soap, data) ( soap_serialize_PointerTons1__setActionsResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__setActionsResponse(soap, data, "ns1:setActionsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setActionsResponse ** SOAP_FMAC4 soap_get_PointerTons1__setActionsResponse(struct soap*, ns1__setActionsResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__setActionsResponse
#define soap_read_PointerTons1__setActionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__setActionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__setActions
#define SOAP_TYPE_PointerTons1__setActions (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__setActions(struct soap*, ns1__setActions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__setActions(struct soap*, const char *, int, ns1__setActions *const*, const char *);
SOAP_FMAC3 ns1__setActions ** SOAP_FMAC4 soap_in_PointerTons1__setActions(struct soap*, const char*, ns1__setActions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__setActions(struct soap*, ns1__setActions *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__setActions
#define soap_write_PointerTons1__setActions(soap, data) ( soap_serialize_PointerTons1__setActions(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__setActions(soap, data, "ns1:setActions", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setActions ** SOAP_FMAC4 soap_get_PointerTons1__setActions(struct soap*, ns1__setActions **, const char*, const char*);

#ifndef soap_read_PointerTons1__setActions
#define soap_read_PointerTons1__setActions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__setActions(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__loginResponse
#define SOAP_TYPE_PointerTons1__loginResponse (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__loginResponse(struct soap*, ns1__loginResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__loginResponse(struct soap*, const char *, int, ns1__loginResponse *const*, const char *);
SOAP_FMAC3 ns1__loginResponse ** SOAP_FMAC4 soap_in_PointerTons1__loginResponse(struct soap*, const char*, ns1__loginResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__loginResponse(struct soap*, ns1__loginResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__loginResponse
#define soap_write_PointerTons1__loginResponse(soap, data) ( soap_serialize_PointerTons1__loginResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__loginResponse(soap, data, "ns1:loginResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__loginResponse ** SOAP_FMAC4 soap_get_PointerTons1__loginResponse(struct soap*, ns1__loginResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__loginResponse
#define soap_read_PointerTons1__loginResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__loginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__login
#define SOAP_TYPE_PointerTons1__login (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__login(struct soap*, ns1__login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__login(struct soap*, const char *, int, ns1__login *const*, const char *);
SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_in_PointerTons1__login(struct soap*, const char*, ns1__login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__login(struct soap*, ns1__login *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__login
#define soap_write_PointerTons1__login(soap, data) ( soap_serialize_PointerTons1__login(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__login(soap, data, "ns1:login", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__login ** SOAP_FMAC4 soap_get_PointerTons1__login(struct soap*, ns1__login **, const char*, const char*);

#ifndef soap_read_PointerTons1__login
#define soap_read_PointerTons1__login(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__login(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__setActionResponse
#define SOAP_TYPE_PointerTons1__setActionResponse (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__setActionResponse(struct soap*, ns1__setActionResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__setActionResponse(struct soap*, const char *, int, ns1__setActionResponse *const*, const char *);
SOAP_FMAC3 ns1__setActionResponse ** SOAP_FMAC4 soap_in_PointerTons1__setActionResponse(struct soap*, const char*, ns1__setActionResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__setActionResponse(struct soap*, ns1__setActionResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__setActionResponse
#define soap_write_PointerTons1__setActionResponse(soap, data) ( soap_serialize_PointerTons1__setActionResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__setActionResponse(soap, data, "ns1:setActionResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setActionResponse ** SOAP_FMAC4 soap_get_PointerTons1__setActionResponse(struct soap*, ns1__setActionResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__setActionResponse
#define soap_read_PointerTons1__setActionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__setActionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__setAction
#define SOAP_TYPE_PointerTons1__setAction (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__setAction(struct soap*, ns1__setAction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__setAction(struct soap*, const char *, int, ns1__setAction *const*, const char *);
SOAP_FMAC3 ns1__setAction ** SOAP_FMAC4 soap_in_PointerTons1__setAction(struct soap*, const char*, ns1__setAction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__setAction(struct soap*, ns1__setAction *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__setAction
#define soap_write_PointerTons1__setAction(soap, data) ( soap_serialize_PointerTons1__setAction(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__setAction(soap, data, "ns1:setAction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__setAction ** SOAP_FMAC4 soap_get_PointerTons1__setAction(struct soap*, ns1__setAction **, const char*, const char*);

#ifndef soap_read_PointerTons1__setAction
#define soap_read_PointerTons1__setAction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__setAction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getStatusResponse
#define SOAP_TYPE_PointerTons1__getStatusResponse (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getStatusResponse(struct soap*, ns1__getStatusResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getStatusResponse(struct soap*, const char *, int, ns1__getStatusResponse *const*, const char *);
SOAP_FMAC3 ns1__getStatusResponse ** SOAP_FMAC4 soap_in_PointerTons1__getStatusResponse(struct soap*, const char*, ns1__getStatusResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getStatusResponse(struct soap*, ns1__getStatusResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getStatusResponse
#define soap_write_PointerTons1__getStatusResponse(soap, data) ( soap_serialize_PointerTons1__getStatusResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getStatusResponse(soap, data, "ns1:getStatusResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getStatusResponse ** SOAP_FMAC4 soap_get_PointerTons1__getStatusResponse(struct soap*, ns1__getStatusResponse **, const char*, const char*);

#ifndef soap_read_PointerTons1__getStatusResponse
#define soap_read_PointerTons1__getStatusResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getStatusResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__getStatus
#define SOAP_TYPE_PointerTons1__getStatus (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getStatus(struct soap*, ns1__getStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getStatus(struct soap*, const char *, int, ns1__getStatus *const*, const char *);
SOAP_FMAC3 ns1__getStatus ** SOAP_FMAC4 soap_in_PointerTons1__getStatus(struct soap*, const char*, ns1__getStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getStatus(struct soap*, ns1__getStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__getStatus
#define soap_write_PointerTons1__getStatus(soap, data) ( soap_serialize_PointerTons1__getStatus(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__getStatus(soap, data, "ns1:getStatus", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__getStatus ** SOAP_FMAC4 soap_get_PointerTons1__getStatus(struct soap*, ns1__getStatus **, const char*, const char*);

#ifndef soap_read_PointerTons1__getStatus
#define soap_read_PointerTons1__getStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__getStatus(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__NoBlameException
#define SOAP_TYPE_PointerTons1__NoBlameException (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NoBlameException(struct soap*, ns1__NoBlameException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NoBlameException(struct soap*, const char *, int, ns1__NoBlameException *const*, const char *);
SOAP_FMAC3 ns1__NoBlameException ** SOAP_FMAC4 soap_in_PointerTons1__NoBlameException(struct soap*, const char*, ns1__NoBlameException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NoBlameException(struct soap*, ns1__NoBlameException *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__NoBlameException
#define soap_write_PointerTons1__NoBlameException(soap, data) ( soap_serialize_PointerTons1__NoBlameException(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__NoBlameException(soap, data, "ns1:NoBlameException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__NoBlameException ** SOAP_FMAC4 soap_get_PointerTons1__NoBlameException(struct soap*, ns1__NoBlameException **, const char*, const char*);

#ifndef soap_read_PointerTons1__NoBlameException
#define soap_read_PointerTons1__NoBlameException(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__NoBlameException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__EndOfGameException
#define SOAP_TYPE_PointerTons1__EndOfGameException (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EndOfGameException(struct soap*, ns1__EndOfGameException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EndOfGameException(struct soap*, const char *, int, ns1__EndOfGameException *const*, const char *);
SOAP_FMAC3 ns1__EndOfGameException ** SOAP_FMAC4 soap_in_PointerTons1__EndOfGameException(struct soap*, const char*, ns1__EndOfGameException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EndOfGameException(struct soap*, ns1__EndOfGameException *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__EndOfGameException
#define soap_write_PointerTons1__EndOfGameException(soap, data) ( soap_serialize_PointerTons1__EndOfGameException(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__EndOfGameException(soap, data, "ns1:EndOfGameException", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__EndOfGameException ** SOAP_FMAC4 soap_get_PointerTons1__EndOfGameException(struct soap*, ns1__EndOfGameException **, const char*, const char*);

#ifndef soap_read_PointerTons1__EndOfGameException
#define soap_read_PointerTons1__EndOfGameException(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__EndOfGameException(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__stateArray
#define SOAP_TYPE_PointerTons1__stateArray (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stateArray(struct soap*, ns1__stateArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stateArray(struct soap*, const char *, int, ns1__stateArray *const*, const char *);
SOAP_FMAC3 ns1__stateArray ** SOAP_FMAC4 soap_in_PointerTons1__stateArray(struct soap*, const char*, ns1__stateArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stateArray(struct soap*, ns1__stateArray *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__stateArray
#define soap_write_PointerTons1__stateArray(soap, data) ( soap_serialize_PointerTons1__stateArray(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__stateArray(soap, data, "ns1:stateArray", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__stateArray ** SOAP_FMAC4 soap_get_PointerTons1__stateArray(struct soap*, ns1__stateArray **, const char*, const char*);

#ifndef soap_read_PointerTons1__stateArray
#define soap_read_PointerTons1__stateArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__stateArray(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__board
#define SOAP_TYPE_PointerTons1__board (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__board(struct soap*, ns1__board *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__board(struct soap*, const char *, int, ns1__board *const*, const char *);
SOAP_FMAC3 ns1__board ** SOAP_FMAC4 soap_in_PointerTons1__board(struct soap*, const char*, ns1__board **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__board(struct soap*, ns1__board *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__board
#define soap_write_PointerTons1__board(soap, data) ( soap_serialize_PointerTons1__board(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__board(soap, data, "ns1:board", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__board ** SOAP_FMAC4 soap_get_PointerTons1__board(struct soap*, ns1__board **, const char*, const char*);

#ifndef soap_read_PointerTons1__board
#define soap_read_PointerTons1__board(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__board(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__delta
#define SOAP_TYPE_PointerTons1__delta (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__delta(struct soap*, ns1__delta *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__delta(struct soap*, const char *, int, ns1__delta *const*, const char *);
SOAP_FMAC3 ns1__delta ** SOAP_FMAC4 soap_in_PointerTons1__delta(struct soap*, const char*, ns1__delta **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__delta(struct soap*, ns1__delta *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__delta
#define soap_write_PointerTons1__delta(soap, data) ( soap_serialize_PointerTons1__delta(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__delta(soap, data, "ns1:delta", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__delta ** SOAP_FMAC4 soap_get_PointerTons1__delta(struct soap*, ns1__delta **, const char*, const char*);

#ifndef soap_read_PointerTons1__delta
#define soap_read_PointerTons1__delta(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__delta(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__base
#define SOAP_TYPE_PointerTons1__base (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__base(struct soap*, ns1__base *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__base(struct soap*, const char *, int, ns1__base *const*, const char *);
SOAP_FMAC3 ns1__base ** SOAP_FMAC4 soap_in_PointerTons1__base(struct soap*, const char*, ns1__base **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__base(struct soap*, ns1__base *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__base
#define soap_write_PointerTons1__base(soap, data) ( soap_serialize_PointerTons1__base(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__base(soap, data, "ns1:base", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__base ** SOAP_FMAC4 soap_get_PointerTons1__base(struct soap*, ns1__base **, const char*, const char*);

#ifndef soap_read_PointerTons1__base
#define soap_read_PointerTons1__base(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__base(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__action
#define SOAP_TYPE_PointerTons1__action (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__action(struct soap*, enum ns1__action *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__action(struct soap*, const char *, int, enum ns1__action *const*, const char *);
SOAP_FMAC3 enum ns1__action ** SOAP_FMAC4 soap_in_PointerTons1__action(struct soap*, const char*, enum ns1__action **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__action(struct soap*, enum ns1__action *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__action
#define soap_write_PointerTons1__action(soap, data) ( soap_serialize_PointerTons1__action(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__action(soap, data, "ns1:action", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns1__action ** SOAP_FMAC4 soap_get_PointerTons1__action(struct soap*, enum ns1__action **, const char*, const char*);

#ifndef soap_read_PointerTons1__action
#define soap_read_PointerTons1__action(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__action(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__direction
#define SOAP_TYPE_PointerTons1__direction (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__direction(struct soap*, enum ns1__direction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__direction(struct soap*, const char *, int, enum ns1__direction *const*, const char *);
SOAP_FMAC3 enum ns1__direction ** SOAP_FMAC4 soap_in_PointerTons1__direction(struct soap*, const char*, enum ns1__direction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__direction(struct soap*, enum ns1__direction *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__direction
#define soap_write_PointerTons1__direction(soap, data) ( soap_serialize_PointerTons1__direction(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__direction(soap, data, "ns1:direction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns1__direction ** SOAP_FMAC4 soap_get_PointerTons1__direction(struct soap*, enum ns1__direction **, const char*, const char*);

#ifndef soap_read_PointerTons1__direction
#define soap_read_PointerTons1__direction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__direction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__unit
#define SOAP_TYPE_PointerTons1__unit (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__unit(struct soap*, ns1__unit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__unit(struct soap*, const char *, int, ns1__unit *const*, const char *);
SOAP_FMAC3 ns1__unit ** SOAP_FMAC4 soap_in_PointerTons1__unit(struct soap*, const char*, ns1__unit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__unit(struct soap*, ns1__unit *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__unit
#define soap_write_PointerTons1__unit(soap, data) ( soap_serialize_PointerTons1__unit(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__unit(soap, data, "ns1:unit", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__unit ** SOAP_FMAC4 soap_get_PointerTons1__unit(struct soap*, ns1__unit **, const char*, const char*);

#ifndef soap_read_PointerTons1__unit
#define soap_read_PointerTons1__unit(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__unit(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__bullet
#define SOAP_TYPE_PointerTons1__bullet (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__bullet(struct soap*, ns1__bullet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__bullet(struct soap*, const char *, int, ns1__bullet *const*, const char *);
SOAP_FMAC3 ns1__bullet ** SOAP_FMAC4 soap_in_PointerTons1__bullet(struct soap*, const char*, ns1__bullet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__bullet(struct soap*, ns1__bullet *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__bullet
#define soap_write_PointerTons1__bullet(soap, data) ( soap_serialize_PointerTons1__bullet(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__bullet(soap, data, "ns1:bullet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__bullet ** SOAP_FMAC4 soap_get_PointerTons1__bullet(struct soap*, ns1__bullet **, const char*, const char*);

#ifndef soap_read_PointerTons1__bullet
#define soap_read_PointerTons1__bullet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__bullet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__point
#define SOAP_TYPE_PointerTons1__point (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__point(struct soap*, ns1__point *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__point(struct soap*, const char *, int, ns1__point *const*, const char *);
SOAP_FMAC3 ns1__point ** SOAP_FMAC4 soap_in_PointerTons1__point(struct soap*, const char*, ns1__point **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__point(struct soap*, ns1__point *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__point
#define soap_write_PointerTons1__point(soap, data) ( soap_serialize_PointerTons1__point(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__point(soap, data, "ns1:point", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__point ** SOAP_FMAC4 soap_get_PointerTons1__point(struct soap*, ns1__point **, const char*, const char*);

#ifndef soap_read_PointerTons1__point
#define soap_read_PointerTons1__point(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__point(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__state
#define SOAP_TYPE_PointerTons1__state (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__state(struct soap*, enum ns1__state *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__state(struct soap*, const char *, int, enum ns1__state *const*, const char *);
SOAP_FMAC3 enum ns1__state ** SOAP_FMAC4 soap_in_PointerTons1__state(struct soap*, const char*, enum ns1__state **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__state(struct soap*, enum ns1__state *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__state
#define soap_write_PointerTons1__state(soap, data) ( soap_serialize_PointerTons1__state(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__state(soap, data, "ns1:state", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns1__state ** SOAP_FMAC4 soap_get_PointerTons1__state(struct soap*, enum ns1__state **, const char*, const char*);

#ifndef soap_read_PointerTons1__state
#define soap_read_PointerTons1__state(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__state(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__unitEvent
#define SOAP_TYPE_PointerTons1__unitEvent (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__unitEvent(struct soap*, ns1__unitEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__unitEvent(struct soap*, const char *, int, ns1__unitEvent *const*, const char *);
SOAP_FMAC3 ns1__unitEvent ** SOAP_FMAC4 soap_in_PointerTons1__unitEvent(struct soap*, const char*, ns1__unitEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__unitEvent(struct soap*, ns1__unitEvent *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__unitEvent
#define soap_write_PointerTons1__unitEvent(soap, data) ( soap_serialize_PointerTons1__unitEvent(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__unitEvent(soap, data, "ns1:unitEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__unitEvent ** SOAP_FMAC4 soap_get_PointerTons1__unitEvent(struct soap*, ns1__unitEvent **, const char*, const char*);

#ifndef soap_read_PointerTons1__unitEvent
#define soap_read_PointerTons1__unitEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__unitEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__blockEvent
#define SOAP_TYPE_PointerTons1__blockEvent (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__blockEvent(struct soap*, ns1__blockEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__blockEvent(struct soap*, const char *, int, ns1__blockEvent *const*, const char *);
SOAP_FMAC3 ns1__blockEvent ** SOAP_FMAC4 soap_in_PointerTons1__blockEvent(struct soap*, const char*, ns1__blockEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__blockEvent(struct soap*, ns1__blockEvent *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__blockEvent
#define soap_write_PointerTons1__blockEvent(soap, data) ( soap_serialize_PointerTons1__blockEvent(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__blockEvent(soap, data, "ns1:blockEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__blockEvent ** SOAP_FMAC4 soap_get_PointerTons1__blockEvent(struct soap*, ns1__blockEvent **, const char*, const char*);

#ifndef soap_read_PointerTons1__blockEvent
#define soap_read_PointerTons1__blockEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__blockEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__player
#define SOAP_TYPE_PointerTons1__player (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__player(struct soap*, ns1__player *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__player(struct soap*, const char *, int, ns1__player *const*, const char *);
SOAP_FMAC3 ns1__player ** SOAP_FMAC4 soap_in_PointerTons1__player(struct soap*, const char*, ns1__player **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__player(struct soap*, ns1__player *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__player
#define soap_write_PointerTons1__player(soap, data) ( soap_serialize_PointerTons1__player(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__player(soap, data, "ns1:player", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__player ** SOAP_FMAC4 soap_get_PointerTons1__player(struct soap*, ns1__player **, const char*, const char*);

#ifndef soap_read_PointerTons1__player
#define soap_read_PointerTons1__player(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__player(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_serialize_PointerTotime(soap, data), soap_begin_send(soap) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__events
#define SOAP_TYPE_PointerTons1__events (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__events(struct soap*, ns1__events *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__events(struct soap*, const char *, int, ns1__events *const*, const char *);
SOAP_FMAC3 ns1__events ** SOAP_FMAC4 soap_in_PointerTons1__events(struct soap*, const char*, ns1__events **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__events(struct soap*, ns1__events *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__events
#define soap_write_PointerTons1__events(soap, data) ( soap_serialize_PointerTons1__events(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__events(soap, data, "ns1:events", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__events ** SOAP_FMAC4 soap_get_PointerTons1__events(struct soap*, ns1__events **, const char*, const char*);

#ifndef soap_read_PointerTons1__events
#define soap_read_PointerTons1__events(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__events(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__game
#define SOAP_TYPE_PointerTons1__game (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__game(struct soap*, ns1__game *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__game(struct soap*, const char *, int, ns1__game *const*, const char *);
SOAP_FMAC3 ns1__game ** SOAP_FMAC4 soap_in_PointerTons1__game(struct soap*, const char*, ns1__game **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__game(struct soap*, ns1__game *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__game
#define soap_write_PointerTons1__game(soap, data) ( soap_serialize_PointerTons1__game(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__game(soap, data, "ns1:game", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__game ** SOAP_FMAC4 soap_get_PointerTons1__game(struct soap*, ns1__game **, const char*, const char*);

#ifndef soap_read_PointerTons1__game
#define soap_read_PointerTons1__game(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__game(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfns1__state
#define SOAP_TYPE_std__vectorTemplateOfns1__state (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__state(struct soap*, std::vector<enum ns1__state >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__state(struct soap*, const std::vector<enum ns1__state >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__state(struct soap*, const char*, int, const std::vector<enum ns1__state >*, const char*);
SOAP_FMAC3 std::vector<enum ns1__state >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__state(struct soap*, const char*, std::vector<enum ns1__state >*, const char*);
SOAP_FMAC1 std::vector<enum ns1__state > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__state(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns1__state > * soap_new_std__vectorTemplateOfns1__state(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns1__state(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns1__state(struct soap *soap, std::vector<enum ns1__state >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns1__state(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__stateArray
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__stateArray (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__stateArray(struct soap*, std::vector<ns1__stateArray * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__stateArray(struct soap*, const std::vector<ns1__stateArray * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__stateArray(struct soap*, const char*, int, const std::vector<ns1__stateArray * >*, const char*);
SOAP_FMAC3 std::vector<ns1__stateArray * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__stateArray(struct soap*, const char*, std::vector<ns1__stateArray * >*, const char*);
SOAP_FMAC1 std::vector<ns1__stateArray * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__stateArray(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__stateArray * > * soap_new_std__vectorTemplateOfPointerTons1__stateArray(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__stateArray(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__stateArray(struct soap *soap, std::vector<ns1__stateArray * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__stateArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__unit
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__unit (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__unit(struct soap*, std::vector<ns1__unit * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__unit(struct soap*, const std::vector<ns1__unit * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__unit(struct soap*, const char*, int, const std::vector<ns1__unit * >*, const char*);
SOAP_FMAC3 std::vector<ns1__unit * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__unit(struct soap*, const char*, std::vector<ns1__unit * >*, const char*);
SOAP_FMAC1 std::vector<ns1__unit * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__unit(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__unit * > * soap_new_std__vectorTemplateOfPointerTons1__unit(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__unit(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__unit(struct soap *soap, std::vector<ns1__unit * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__unit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__bullet
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__bullet (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__bullet(struct soap*, std::vector<ns1__bullet * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__bullet(struct soap*, const std::vector<ns1__bullet * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__bullet(struct soap*, const char*, int, const std::vector<ns1__bullet * >*, const char*);
SOAP_FMAC3 std::vector<ns1__bullet * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__bullet(struct soap*, const char*, std::vector<ns1__bullet * >*, const char*);
SOAP_FMAC1 std::vector<ns1__bullet * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__bullet(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__bullet * > * soap_new_std__vectorTemplateOfPointerTons1__bullet(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__bullet(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__bullet(struct soap *soap, std::vector<ns1__bullet * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__bullet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__unitEvent
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__unitEvent (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__unitEvent(struct soap*, std::vector<ns1__unitEvent * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__unitEvent(struct soap*, const std::vector<ns1__unitEvent * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__unitEvent(struct soap*, const char*, int, const std::vector<ns1__unitEvent * >*, const char*);
SOAP_FMAC3 std::vector<ns1__unitEvent * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__unitEvent(struct soap*, const char*, std::vector<ns1__unitEvent * >*, const char*);
SOAP_FMAC1 std::vector<ns1__unitEvent * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__unitEvent(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__unitEvent * > * soap_new_std__vectorTemplateOfPointerTons1__unitEvent(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__unitEvent(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__unitEvent(struct soap *soap, std::vector<ns1__unitEvent * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__unitEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__blockEvent
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__blockEvent (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__blockEvent(struct soap*, std::vector<ns1__blockEvent * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__blockEvent(struct soap*, const std::vector<ns1__blockEvent * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__blockEvent(struct soap*, const char*, int, const std::vector<ns1__blockEvent * >*, const char*);
SOAP_FMAC3 std::vector<ns1__blockEvent * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__blockEvent(struct soap*, const char*, std::vector<ns1__blockEvent * >*, const char*);
SOAP_FMAC1 std::vector<ns1__blockEvent * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__blockEvent(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__blockEvent * > * soap_new_std__vectorTemplateOfPointerTons1__blockEvent(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__blockEvent(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__blockEvent(struct soap *soap, std::vector<ns1__blockEvent * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__blockEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__player
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__player (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__player(struct soap*, std::vector<ns1__player * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__player(struct soap*, const std::vector<ns1__player * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__player(struct soap*, const char*, int, const std::vector<ns1__player * >*, const char*);
SOAP_FMAC3 std::vector<ns1__player * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__player(struct soap*, const char*, std::vector<ns1__player * >*, const char*);
SOAP_FMAC1 std::vector<ns1__player * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__player(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__player * > * soap_new_std__vectorTemplateOfPointerTons1__player(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__player(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__player(struct soap *soap, std::vector<ns1__player * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__player(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
