/* soapStub.h
   Generated by gSOAP 2.8.15 from generated/ChallengeService.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://challenge.entelect.co.za/"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "soap/stdsoap2.h"
#if GSOAP_VERSION != 20815
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns1__state
#define SOAP_TYPE_ns1__state (33)
/* ns1:state */
enum ns1__state { ns1__state__FULL = 0, ns1__state__EMPTY = 1, ns1__state__OUT_USCOREOF_USCOREBOUNDS = 2, ns1__state__NONE = 3 };
typedef enum ns1__state ns1__state;
#endif

#ifndef SOAP_TYPE_ns1__direction
#define SOAP_TYPE_ns1__direction (34)
/* ns1:direction */
enum ns1__direction { ns1__direction__NONE = 0, ns1__direction__UP = 1, ns1__direction__DOWN = 2, ns1__direction__LEFT = 3, ns1__direction__RIGHT = 4 };
typedef enum ns1__direction ns1__direction;
#endif

#ifndef SOAP_TYPE_ns1__action
#define SOAP_TYPE_ns1__action (35)
/* ns1:action */
enum ns1__action { ns1__action__NONE = 0, ns1__action__UP = 1, ns1__action__DOWN = 2, ns1__action__LEFT = 3, ns1__action__RIGHT = 4, ns1__action__FIRE = 5 };
typedef enum ns1__action ns1__action;
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__getStatus
#define SOAP_TYPE_ns1__getStatus (8)
/* ns1:getStatus */
class SOAP_CMAC ns1__getStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__getStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getStatus() { ns1__getStatus::soap_default(NULL); }
	virtual ~ns1__getStatus() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getStatusResponse
#define SOAP_TYPE_ns1__getStatusResponse (9)
/* ns1:getStatusResponse */
class SOAP_CMAC ns1__getStatusResponse
{
public:
	class ns1__game *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:game */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__getStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getStatusResponse() { ns1__getStatusResponse::soap_default(NULL); }
	virtual ~ns1__getStatusResponse() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__game
#define SOAP_TYPE_ns1__game (10)
/* ns1:game */
class SOAP_CMAC ns1__game
{
public:
	int currentTick;	/* required element of type xsd:int */
	class ns1__events *events;	/* optional element of type ns1:events */
	LONG64 millisecondsToNextTick;	/* required element of type xsd:long */
	time_t *nextTickTime;	/* optional element of type xsd:dateTime */
	std::string *playerName;	/* optional element of type xsd:string */
	std::vector<class ns1__player * >players;	/* optional element of type ns1:player */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__game */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__game() { ns1__game::soap_default(NULL); }
	virtual ~ns1__game() { }
};
#endif

#ifndef SOAP_TYPE_ns1__events
#define SOAP_TYPE_ns1__events (11)
/* ns1:events */
class SOAP_CMAC ns1__events
{
public:
	std::vector<class ns1__blockEvent * >blockEvents;	/* optional element of type ns1:blockEvent */
	std::vector<class ns1__unitEvent * >unitEvents;	/* optional element of type ns1:unitEvent */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__events */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__events() { ns1__events::soap_default(NULL); }
	virtual ~ns1__events() { }
};
#endif

#ifndef SOAP_TYPE_ns1__blockEvent
#define SOAP_TYPE_ns1__blockEvent (12)
/* ns1:blockEvent */
class SOAP_CMAC ns1__blockEvent
{
public:
	enum ns1__state *newState;	/* optional element of type ns1:state */
	class ns1__point *point;	/* optional element of type ns1:point */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__blockEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__blockEvent() { ns1__blockEvent::soap_default(NULL); }
	virtual ~ns1__blockEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__point
#define SOAP_TYPE_ns1__point (13)
/* ns1:point */
class SOAP_CMAC ns1__point
{
public:
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__point */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__point() { ns1__point::soap_default(NULL); }
	virtual ~ns1__point() { }
};
#endif

#ifndef SOAP_TYPE_ns1__unitEvent
#define SOAP_TYPE_ns1__unitEvent (14)
/* ns1:unitEvent */
class SOAP_CMAC ns1__unitEvent
{
public:
	class ns1__bullet *bullet;	/* optional element of type ns1:bullet */
	int tickTime;	/* required element of type xsd:int */
	class ns1__unit *unit;	/* optional element of type ns1:unit */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__unitEvent */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__unitEvent() { ns1__unitEvent::soap_default(NULL); }
	virtual ~ns1__unitEvent() { }
};
#endif

#ifndef SOAP_TYPE_ns1__bullet
#define SOAP_TYPE_ns1__bullet (15)
/* ns1:bullet */
class SOAP_CMAC ns1__bullet
{
public:
	enum ns1__direction *direction;	/* optional element of type ns1:direction */
	int id;	/* required element of type xsd:int */
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__bullet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__bullet() { ns1__bullet::soap_default(NULL); }
	virtual ~ns1__bullet() { }
};
#endif

#ifndef SOAP_TYPE_ns1__unit
#define SOAP_TYPE_ns1__unit (16)
/* ns1:unit */
class SOAP_CMAC ns1__unit
{
public:
	enum ns1__action *action;	/* optional element of type ns1:action */
	enum ns1__direction *direction;	/* optional element of type ns1:direction */
	int id;	/* required element of type xsd:int */
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__unit */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__unit() { ns1__unit::soap_default(NULL); }
	virtual ~ns1__unit() { }
};
#endif

#ifndef SOAP_TYPE_ns1__player
#define SOAP_TYPE_ns1__player (17)
/* ns1:player */
class SOAP_CMAC ns1__player
{
public:
	class ns1__base *base;	/* optional element of type ns1:base */
	std::vector<ns1__bullet * >bullets;	/* optional element of type ns1:bullet */
	std::string *name;	/* optional element of type xsd:string */
	std::vector<ns1__unit * >units;	/* optional element of type ns1:unit */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__player */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__player() { ns1__player::soap_default(NULL); }
	virtual ~ns1__player() { }
};
#endif

#ifndef SOAP_TYPE_ns1__base
#define SOAP_TYPE_ns1__base (18)
/* ns1:base */
class SOAP_CMAC ns1__base
{
public:
	int x;	/* required element of type xsd:int */
	int y;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns1__base */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__base() { ns1__base::soap_default(NULL); }
	virtual ~ns1__base() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abstractCollection
#define SOAP_TYPE_ns1__abstractCollection (19)
/* ns1:abstractCollection */
class SOAP_CMAC ns1__abstractCollection
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__abstractCollection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abstractCollection() { ns1__abstractCollection::soap_default(NULL); }
	virtual ~ns1__abstractCollection() { }
};
#endif

#ifndef SOAP_TYPE_ns1__setAction
#define SOAP_TYPE_ns1__setAction (22)
/* ns1:setAction */
class SOAP_CMAC ns1__setAction
{
public:
	int arg0;	/* required element of type xsd:int */
	enum ns1__action *arg1;	/* optional element of type ns1:action */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns1__setAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__setAction() { ns1__setAction::soap_default(NULL); }
	virtual ~ns1__setAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__setActionResponse
#define SOAP_TYPE_ns1__setActionResponse (23)
/* ns1:setActionResponse */
class SOAP_CMAC ns1__setActionResponse
{
public:
	class ns1__delta *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:delta */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns1__setActionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__setActionResponse() { ns1__setActionResponse::soap_default(NULL); }
	virtual ~ns1__setActionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__delta
#define SOAP_TYPE_ns1__delta (24)
/* ns1:delta */
class SOAP_CMAC ns1__delta
{
public:
	LONG64 millisecondsToNextTick;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns1__delta */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__delta() { ns1__delta::soap_default(NULL); }
	virtual ~ns1__delta() { }
};
#endif

#ifndef SOAP_TYPE_ns1__login
#define SOAP_TYPE_ns1__login (25)
/* ns1:login */
class SOAP_CMAC ns1__login
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns1__login */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__login() { ns1__login::soap_default(NULL); }
	virtual ~ns1__login() { }
};
#endif

#ifndef SOAP_TYPE_ns1__loginResponse
#define SOAP_TYPE_ns1__loginResponse (26)
/* ns1:loginResponse */
class SOAP_CMAC ns1__loginResponse
{
public:
	class ns1__board *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:board */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns1__loginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__loginResponse() { ns1__loginResponse::soap_default(NULL); }
	virtual ~ns1__loginResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__board
#define SOAP_TYPE_ns1__board (27)
/* ns1:board */
class SOAP_CMAC ns1__board
{
public:
	std::vector<class ns1__stateArray * >states;	/* optional element of type ns1:stateArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns1__board */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__board() { ns1__board::soap_default(NULL); }
	virtual ~ns1__board() { }
};
#endif

#ifndef SOAP_TYPE_ns1__setActions
#define SOAP_TYPE_ns1__setActions (28)
/* ns1:setActions */
class SOAP_CMAC ns1__setActions
{
public:
	enum ns1__action *arg0;	/* optional element of type ns1:action */
	enum ns1__action *arg1;	/* optional element of type ns1:action */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns1__setActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__setActions() { ns1__setActions::soap_default(NULL); }
	virtual ~ns1__setActions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__setActionsResponse
#define SOAP_TYPE_ns1__setActionsResponse (29)
/* ns1:setActionsResponse */
class SOAP_CMAC ns1__setActionsResponse
{
public:
	ns1__delta *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:delta */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns1__setActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__setActionsResponse() { ns1__setActionsResponse::soap_default(NULL); }
	virtual ~ns1__setActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__stateArray
#define SOAP_TYPE_ns1__stateArray (30)
/* ns1:stateArray */
class SOAP_CMAC ns1__stateArray
{
public:
	std::vector<enum ns1__state >item;	/* optional element of type ns1:state */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns1__stateArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__stateArray() { ns1__stateArray::soap_default(NULL); }
	virtual ~ns1__stateArray() { }
};
#endif

#ifndef SOAP_TYPE_ns1__EndOfGameException
#define SOAP_TYPE_ns1__EndOfGameException (31)
/* ns1:EndOfGameException */
class SOAP_CMAC ns1__EndOfGameException
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns1__EndOfGameException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__EndOfGameException() { ns1__EndOfGameException::soap_default(NULL); }
	virtual ~ns1__EndOfGameException() { }
};
#endif

#ifndef SOAP_TYPE_ns1__NoBlameException
#define SOAP_TYPE_ns1__NoBlameException (32)
/* ns1:NoBlameException */
class SOAP_CMAC ns1__NoBlameException
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns1__NoBlameException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__NoBlameException() { ns1__NoBlameException::soap_default(NULL); }
	virtual ~ns1__NoBlameException() { }
};
#endif

#ifndef SOAP_TYPE_ns1__abstractList
#define SOAP_TYPE_ns1__abstractList (20)
/* ns1:abstractList */
class SOAP_CMAC ns1__abstractList : public ns1__abstractCollection
{
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__abstractList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__abstractList() { ns1__abstractList::soap_default(NULL); }
	virtual ~ns1__abstractList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__arrayList
#define SOAP_TYPE_ns1__arrayList (21)
/* ns1:arrayList */
class SOAP_CMAC ns1__arrayList : public ns1__abstractList
{
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns1__arrayList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__arrayList() { ns1__arrayList::soap_default(NULL); }
	virtual ~ns1__arrayList() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (64)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	ns1__EndOfGameException *ns1__EndOfGameException_;	/* optional element of type ns1:EndOfGameException */
	ns1__NoBlameException *ns1__NoBlameException_;	/* optional element of type ns1:NoBlameException */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 64; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef SOAP_TYPE___ns1__getStatus
#define SOAP_TYPE___ns1__getStatus (72)
/* Operation wrapper: */
struct __ns1__getStatus
{
public:
	ns1__getStatus *ns1__getStatus_;	/* optional element of type ns1:getStatus */
public:
	int soap_type() const { return 72; } /* = unique id SOAP_TYPE___ns1__getStatus */
};
#endif

#ifndef SOAP_TYPE___ns1__setAction
#define SOAP_TYPE___ns1__setAction (76)
/* Operation wrapper: */
struct __ns1__setAction
{
public:
	ns1__setAction *ns1__setAction_;	/* optional element of type ns1:setAction */
public:
	int soap_type() const { return 76; } /* = unique id SOAP_TYPE___ns1__setAction */
};
#endif

#ifndef SOAP_TYPE___ns1__login
#define SOAP_TYPE___ns1__login (80)
/* Operation wrapper: */
struct __ns1__login
{
public:
	ns1__login *ns1__login_;	/* optional element of type ns1:login */
public:
	int soap_type() const { return 80; } /* = unique id SOAP_TYPE___ns1__login */
};
#endif

#ifndef SOAP_TYPE___ns1__setActions
#define SOAP_TYPE___ns1__setActions (84)
/* Operation wrapper: */
struct __ns1__setActions
{
public:
	ns1__setActions *ns1__setActions_;	/* optional element of type ns1:setActions */
public:
	int soap_type() const { return 84; } /* = unique id SOAP_TYPE___ns1__setActions */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (85)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 85; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (86)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 86; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (88)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 88; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (89)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 89; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
